package main

import (
	"budget4home/src/config"
	"budget4home/src/expense"
	"budget4home/src/group"
	"budget4home/src/label"
	"budget4home/src/user"
	"os"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

	_ "budget4home/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title budget4home API
// @version 1.0
// @description Project to control budget for home.\n\nAuthorization header: insert your access token default (Bearer TOKEN)

// @host localhost:5000
// @BasePath /api
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization

func main() {
	db := config.SetupDb()
	config.SeedDb(db)
	app, auth := config.SetupFirebase()

	r := gin.Default()

	{ // set global params into context
		r.Use(func(c *gin.Context) {
			c.Set("db", db)
			c.Set("firebaseApp", app)
			c.Set("firebaseAuth", auth)
		})
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	api := r.Group("/api")

	{ // labels
		repo := label.NewRepository(db)
		service := label.NewService(repo)
		label.NewController(api, service)
	}

	{ // expenses
		repo := expense.NewRepository(db)
		service := expense.NewService(repo)
		expense.NewController(api, service)
	}

	// users
	repo := user.NewRepository(auth)
	service := user.NewService(repo)
	user.NewController(api, service)

	{ // groups
		repo := group.NewRepository(db)
		service := group.NewService(repo, service)
		group.NewController(api, service)
	}

	if len(os.Getenv("PORT")) == 0 {
		// set default port
		os.Setenv("PORT", "5000")
	}
	r.Run(":" + os.Getenv("PORT"))
}
